<!--===========================================================================
  This is the build file for the Pentaho Mantle project.
  
  This build file will use the common_build.xml file as the default build
  process and should only override the tasks that need to differ from
  the common build file.
  
  See common_build.xml for more details
============================================================================-->
<project name="Pentaho Reporting Platform Plugin" basedir="." default="default" xmlns:ivy="antlib:org.apache.ivy.ant">

  <property file="${user.home}/.pentaho-reporting-build-settings.properties"
            description="Per user override settings-file for all pentaho-reporting projects." />

  <!-- Import the common_build.xml file which contains all the default tasks -->
  <import file="./build-res/subfloor-pkg.xml" />
  <import file="./build-res/subfloor-js.xml" />


  <property name="install.lib-dir" value="${install.target-dir}/tomcat/webapps/pentaho/WEB-INF/lib/"/>

  <!--
      AS STATED ABOVE, THE ONLY TASKS THAT SHOULD EXIST IN THIS BUILD FILE ARE
      THE TASKS THAT NEED TO DIFFER FROM THE DEFAULT IMPLEMENTATION OF THE TASKS
      FOUND IN common_build.xml.
    -->

  <target name="resolve" depends="resolve-runtime,subfloor.resolve,subfloor-js.resolve-js"/>

  <target name="stage-js-build">
    <!-- Remove the scripts/ directory that subfloor-js staged -->
    <!--<delete dir="${approot.stage.dir}/scripts"/>-->
  </target>

  <!--<target name="publish-local-nojar" depends="subfloor-js.js.publish-local-nojar"/>-->

  <!-- override the subfloor assemble target to do special assembly from the war directory -->
  <target name="assemble" depends="compile,assemble.init,build-js,package-js-output">
    <!--copy todir="${approot.stage.dir}/lib">
      <fileset dir="${lib.dir}" excludes="pentaho-bi-platform-*.jar" />
      <fileset file="${dist.dir}/${ivy.artifact.id}-${project.revision}.jar" />
      <fileset file="${lib.dir}/gwt-user*.jar" />
    </copy-->
    <copy todir="${approot.stage.dir}">
      <fileset dir="${package.resdir}" />
    </copy>
    <!-- Copy the js build output -->
    <copy todir="${approot.stage.dir}/reportviewer/compressed" overwrite="true">
      <!-- Remove top-level directory when copying -->
      <flattenmapper/>
      <fileset dir="${js.build.output.dir}">
        <!-- Entire application -->
        <include name="reportviewer/reportviewer-app.js"/>
        <!-- Core for use by other apps-->
        <include name="reportviewer/reportviewer-main-module.js"/>
        <include name="reportviewer/formatter.js"/>
      </fileset>
    </copy>
  </target>

  <target name="install" >
    <echo message="delete tomcat plugin: ${install.target-dir}/pentaho-solutions/system/reporting" />
    <delete failonerror="true" dir="${install.target-dir}/pentaho-solutions/system/reporting"/>
	
	<echo message="Unzip: ${dist.dir}/${package.basename}.zip" />
	<echo message="install to directory: ${install.target-dir}/pentaho-solutions/system/" />
	<unzip src="${dist.dir}/${package.basename}.zip" dest="${install.target-dir}/pentaho-solutions/system/" overwrite="true" />
    
	<echo message="install file: ${dist.dir}/${ivy.artifact.id}-${project.revision}.jar" />
	<echo message="install jar to : ${install.lib-dir}/${ivy.artifact.id}-${project.revision}.jar" />
	<copy overwrite="true" todir="${install.lib-dir}" file="${dist.dir}/${ivy.artifact.id}-${project.revision}.jar"/>
	
	<!--echo message="install jar" />
	<delete failonerror="true" file="${install.target-dir}/tomcat/webapps/pentaho/WEB-INF/lib/pentaho-reporting-engine-classic-core-platform-plugin-6.1-SNAPSHOT.jar" />
	<copy failonerror="true" file="dist/pentaho-reporting-engine-classic-core-platform-plugin-6.1-SNAPSHOT.jar" todir="${install.target-dir}/tomcat/webapps/pentaho/WEB-INF/lib" / -->
  </target>

  <target name="dist-source" depends="dist-js, subfloor.dist-source"/>

  <target name="publish-nojar" depends="subfloor-js.js.publish-nojar, subfloor-pkg.publish-nojar"/>


  <!-- override of subfloor.js due to new file added in the build composition. Should be removed once this change gets
   merged to the subfloor -->
  <target name="extract-source-and-build-require-js-profile" depends="install-antcontrib, check-pentaho-js-build-downloaded">
    <if>
      <not>
        <available file="${js.module.script.agg.dir}"/>
      </not>
      <then>
        <echo message="Extracting Javascript from Dependencies"/>
        <delete dir="${js.module.script.agg.dir}"/>

        <unzip dest="${js.module.script.agg.dir}" overwrite="true">
          <fileset dir=".">
            <include name="${js.lib.dir}/*.zip"/>
          </fileset>
        </unzip>

        <copy todir="${js.module.script.agg.dir}/${js.module.script.namespace}" overwrite="true">
          <fileset dir="${js.module.script.dir}">
            <include name="**/*"/>
          </fileset>
        </copy>

        <path id="build.classpath">
          <fileset dir="build-res/pentaho-js-build/libs"> <!-- temporary until core build files in artifactory -->
            <include name="*.jar"/>
          </fileset>
        </path>
        <echo message="Collecting RequireJS Configurations"/>
        <echo message="var requireCfg={paths: {}, shim: {}, map: {&quot;*&quot;: {}}, bundles: {}, config: {service: {}}, packages: []};"
              file="build-res/requireCfg-raw.js" append="false"/>
        <concat destfile="build-res/requireCfg-raw.js" append="true" force="yes">
          <file file="build-res/context.js"/>
        </concat>
        <concat destfile="build-res/requireCfg-raw.js" append="true" force="yes">
          <fileset dir="${js.module.script.agg.dir}" casesensitive="yes">
            <include name="*/*-require-js-cfg.js"/>
          </fileset>
        </concat>

        <java classname="org.mozilla.javascript.tools.shell.Main"
              fork="true"
              classpathref="build.classpath"
              args="build-res/pentaho-js-build/profileBuilder.js">
        </java>

        <echo message="require(requireCfg);" append="true" file="build-res/requireCfg.js"/>
      </then>
    </if>
  </target>
</project>
